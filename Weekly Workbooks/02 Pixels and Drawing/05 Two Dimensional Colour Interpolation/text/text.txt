In the earlier grayscale interpolation task, we were interpolating a single float value in just one dimension (the x axis). In this current task we will interpolate 3 float values (Red / Green / Blue) in _two_ dimensions (x _and_ y). Click on the blue button above to view a video showing more details about interpolating RGB colour values. Once you are confident with the concepts covered, implement the 2D RGB interpolation in order to produce the effect shown in the image below. To help you in this task, you can use the `interpolateThreeElementValues` function that you wrote in the previous task. If you are a mathematician, it might seem a bit strange to use a vector to store and manipulate a colour. But C++ programmers do a lot of unusual things with their data types, so we should probably try to get used to this kind of thing.
