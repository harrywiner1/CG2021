In the previous task, we considered projection onto the image plane abstractly and in theory. In this task we explore how this projection is actually achieved and implement it in code. Add a new function to your project called `getCanvasIntersectionPoint` which takes in the following three parameters:

- `cameraPosition`: the (x,y,z) location of the camera (passed in as a `vec3`)
- `vertexPosition`: the (x,y,z) location of a vertex from a model (passed in as a `vec3`)
- `focalLength`: the distance from camera to the image plane/canvas

Your code should calculate and return the 2D `CanvasPoint` position at which the model vertex is projected onto the image plane/canvas. For a particular vertex _i_ that has a position in 3D space of _(x<sup>i</sup>, y<sup>i</sup>, z<sup>i</sup>)_ we can calculate its position on the image plane _(u<sup>i</sup>, v<sup>i</sup>)_ using the two formulae provided below (where _f_ is focal length, W and H are the width and height of the image plane/canvas).

