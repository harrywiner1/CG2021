We need to be careful when searching for ray/triangle intersections because the `getClosestIntersection` function can often return false-positive results. The reason for this is that formulae provided previously allow us to calculate the intersection between a line and a _plane_. We must however remember that the triangle is a discrete segment of that plane. The code that you wrote in the previous task will find solutions that are _on the same plane_ as the triangle, but not actually _within the bounds_ of the triangle itself (as illustrated by the X in the diagram below).

In order to solve this problem, we simply have to validate the coordinates of a potential intersection before we accept it as a solution. Watch the video linked to at the top of this task for an explanation of how this is achieved. Once you have grasped the basic principles, implement the validation check in your `getClosestIntersection` function so that it checks a possible solution to make sure that it is valid _before_ returning it as an actual solution. To help you in this task, integrate the following three tests into your code:

```
(u >= 0.0) && (u <= 1.0)
(v >= 0.0) && (v <= 1.0)
(u + v) <= 1.0
```

You should also check that the distance `t` from the camera to the intersection is positive - otherwise you may end up rendering triangles that are actually _behind_ the camera !
